/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.othersonline.kv.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class KeyValueService {

  public interface Iface {

    public boolean exists(String key) throws KeyValueStoreIOException, KeyValueStoreException, TException;

    public GetResult getValue(String key) throws KeyValueStoreIOException, KeyValueStoreException, TException;

    public void setValue(String key, byte[] data) throws KeyValueStoreIOException, KeyValueStoreException, TException;

    public void deleteValue(String key) throws KeyValueStoreIOException, KeyValueStoreException, TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public boolean exists(String key) throws KeyValueStoreIOException, KeyValueStoreException, TException
    {
      send_exists(key);
      return recv_exists();
    }

    public void send_exists(String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("exists", TMessageType.CALL, seqid_));
      exists_args args = new exists_args();
      args.key = key;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_exists() throws KeyValueStoreIOException, KeyValueStoreException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      exists_result result = new exists_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ioException != null) {
        throw result.ioException;
      }
      if (result.keyValueStoreException != null) {
        throw result.keyValueStoreException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "exists failed: unknown result");
    }

    public GetResult getValue(String key) throws KeyValueStoreIOException, KeyValueStoreException, TException
    {
      send_getValue(key);
      return recv_getValue();
    }

    public void send_getValue(String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getValue", TMessageType.CALL, seqid_));
      getValue_args args = new getValue_args();
      args.key = key;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public GetResult recv_getValue() throws KeyValueStoreIOException, KeyValueStoreException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getValue_result result = new getValue_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ioException != null) {
        throw result.ioException;
      }
      if (result.keyValueStoreException != null) {
        throw result.keyValueStoreException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getValue failed: unknown result");
    }

    public void setValue(String key, byte[] data) throws KeyValueStoreIOException, KeyValueStoreException, TException
    {
      send_setValue(key, data);
      recv_setValue();
    }

    public void send_setValue(String key, byte[] data) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setValue", TMessageType.CALL, seqid_));
      setValue_args args = new setValue_args();
      args.key = key;
      args.data = data;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_setValue() throws KeyValueStoreIOException, KeyValueStoreException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      setValue_result result = new setValue_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ioException != null) {
        throw result.ioException;
      }
      if (result.keyValueStoreException != null) {
        throw result.keyValueStoreException;
      }
      return;
    }

    public void deleteValue(String key) throws KeyValueStoreIOException, KeyValueStoreException, TException
    {
      send_deleteValue(key);
      recv_deleteValue();
    }

    public void send_deleteValue(String key) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("deleteValue", TMessageType.CALL, seqid_));
      deleteValue_args args = new deleteValue_args();
      args.key = key;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_deleteValue() throws KeyValueStoreIOException, KeyValueStoreException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      deleteValue_result result = new deleteValue_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ioException != null) {
        throw result.ioException;
      }
      if (result.keyValueStoreException != null) {
        throw result.keyValueStoreException;
      }
      return;
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("exists", new exists());
      processMap_.put("getValue", new getValue());
      processMap_.put("setValue", new setValue());
      processMap_.put("deleteValue", new deleteValue());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class exists implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        exists_args args = new exists_args();
        args.read(iprot);
        iprot.readMessageEnd();
        exists_result result = new exists_result();
        try {
          result.success = iface_.exists(args.key);
          result.__isset.success = true;
        } catch (KeyValueStoreIOException ioException) {
          result.ioException = ioException;
        } catch (KeyValueStoreException keyValueStoreException) {
          result.keyValueStoreException = keyValueStoreException;
        }
        oprot.writeMessageBegin(new TMessage("exists", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getValue implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getValue_args args = new getValue_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getValue_result result = new getValue_result();
        try {
          result.success = iface_.getValue(args.key);
        } catch (KeyValueStoreIOException ioException) {
          result.ioException = ioException;
        } catch (KeyValueStoreException keyValueStoreException) {
          result.keyValueStoreException = keyValueStoreException;
        }
        oprot.writeMessageBegin(new TMessage("getValue", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setValue implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setValue_args args = new setValue_args();
        args.read(iprot);
        iprot.readMessageEnd();
        setValue_result result = new setValue_result();
        try {
          iface_.setValue(args.key, args.data);
        } catch (KeyValueStoreIOException ioException) {
          result.ioException = ioException;
        } catch (KeyValueStoreException keyValueStoreException) {
          result.keyValueStoreException = keyValueStoreException;
        }
        oprot.writeMessageBegin(new TMessage("setValue", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteValue implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        deleteValue_args args = new deleteValue_args();
        args.read(iprot);
        iprot.readMessageEnd();
        deleteValue_result result = new deleteValue_result();
        try {
          iface_.deleteValue(args.key);
        } catch (KeyValueStoreIOException ioException) {
          result.ioException = ioException;
        } catch (KeyValueStoreException keyValueStoreException) {
          result.keyValueStoreException = keyValueStoreException;
        }
        oprot.writeMessageBegin(new TMessage("deleteValue", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class exists_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("exists_args");
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);

    private String key;
    public static final int KEY = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(exists_args.class, metaDataMap);
    }

    public exists_args() {
    }

    public exists_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exists_args(exists_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    @Override
    public exists_args clone() {
      return new exists_args(this);
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    // Returns true if field key is set (has been asigned a value) and false otherwise
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case KEY:
        return getKey();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case KEY:
        return isSetKey();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exists_args)
        return this.equals((exists_args)that);
      return false;
    }

    public boolean equals(exists_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case KEY:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exists_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class exists_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("exists_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField IO_EXCEPTION_FIELD_DESC = new TField("ioException", TType.STRUCT, (short)1);
    private static final TField KEY_VALUE_STORE_EXCEPTION_FIELD_DESC = new TField("keyValueStoreException", TType.STRUCT, (short)2);

    private boolean success;
    public static final int SUCCESS = 0;
    private KeyValueStoreIOException ioException;
    public static final int IOEXCEPTION = 1;
    private KeyValueStoreException keyValueStoreException;
    public static final int KEYVALUESTOREEXCEPTION = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(IOEXCEPTION, new FieldMetaData("ioException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(KEYVALUESTOREEXCEPTION, new FieldMetaData("keyValueStoreException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(exists_result.class, metaDataMap);
    }

    public exists_result() {
    }

    public exists_result(
      boolean success,
      KeyValueStoreIOException ioException,
      KeyValueStoreException keyValueStoreException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.ioException = ioException;
      this.keyValueStoreException = keyValueStoreException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exists_result(exists_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetIoException()) {
        this.ioException = new KeyValueStoreIOException(other.ioException);
      }
      if (other.isSetKeyValueStoreException()) {
        this.keyValueStoreException = new KeyValueStoreException(other.keyValueStoreException);
      }
    }

    @Override
    public exists_result clone() {
      return new exists_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public KeyValueStoreIOException getIoException() {
      return this.ioException;
    }

    public void setIoException(KeyValueStoreIOException ioException) {
      this.ioException = ioException;
    }

    public void unsetIoException() {
      this.ioException = null;
    }

    // Returns true if field ioException is set (has been asigned a value) and false otherwise
    public boolean isSetIoException() {
      return this.ioException != null;
    }

    public KeyValueStoreException getKeyValueStoreException() {
      return this.keyValueStoreException;
    }

    public void setKeyValueStoreException(KeyValueStoreException keyValueStoreException) {
      this.keyValueStoreException = keyValueStoreException;
    }

    public void unsetKeyValueStoreException() {
      this.keyValueStoreException = null;
    }

    // Returns true if field keyValueStoreException is set (has been asigned a value) and false otherwise
    public boolean isSetKeyValueStoreException() {
      return this.keyValueStoreException != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IOEXCEPTION:
        if (value == null) {
          unsetIoException();
        } else {
          setIoException((KeyValueStoreIOException)value);
        }
        break;

      case KEYVALUESTOREEXCEPTION:
        if (value == null) {
          unsetKeyValueStoreException();
        } else {
          setKeyValueStoreException((KeyValueStoreException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case IOEXCEPTION:
        return getIoException();

      case KEYVALUESTOREEXCEPTION:
        return getKeyValueStoreException();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case IOEXCEPTION:
        return isSetIoException();
      case KEYVALUESTOREEXCEPTION:
        return isSetKeyValueStoreException();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exists_result)
        return this.equals((exists_result)that);
      return false;
    }

    public boolean equals(exists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ioException = true && this.isSetIoException();
      boolean that_present_ioException = true && that.isSetIoException();
      if (this_present_ioException || that_present_ioException) {
        if (!(this_present_ioException && that_present_ioException))
          return false;
        if (!this.ioException.equals(that.ioException))
          return false;
      }

      boolean this_present_keyValueStoreException = true && this.isSetKeyValueStoreException();
      boolean that_present_keyValueStoreException = true && that.isSetKeyValueStoreException();
      if (this_present_keyValueStoreException || that_present_keyValueStoreException) {
        if (!(this_present_keyValueStoreException && that_present_keyValueStoreException))
          return false;
        if (!this.keyValueStoreException.equals(that.keyValueStoreException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case IOEXCEPTION:
            if (field.type == TType.STRUCT) {
              this.ioException = new KeyValueStoreIOException();
              this.ioException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case KEYVALUESTOREEXCEPTION:
            if (field.type == TType.STRUCT) {
              this.keyValueStoreException = new KeyValueStoreException();
              this.keyValueStoreException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetIoException()) {
        oprot.writeFieldBegin(IO_EXCEPTION_FIELD_DESC);
        this.ioException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetKeyValueStoreException()) {
        oprot.writeFieldBegin(KEY_VALUE_STORE_EXCEPTION_FIELD_DESC);
        this.keyValueStoreException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioException:");
      if (this.ioException == null) {
        sb.append("null");
      } else {
        sb.append(this.ioException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyValueStoreException:");
      if (this.keyValueStoreException == null) {
        sb.append("null");
      } else {
        sb.append(this.keyValueStoreException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class getValue_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getValue_args");
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);

    private String key;
    public static final int KEY = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(getValue_args.class, metaDataMap);
    }

    public getValue_args() {
    }

    public getValue_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getValue_args(getValue_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    @Override
    public getValue_args clone() {
      return new getValue_args(this);
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    // Returns true if field key is set (has been asigned a value) and false otherwise
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case KEY:
        return getKey();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case KEY:
        return isSetKey();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getValue_args)
        return this.equals((getValue_args)that);
      return false;
    }

    public boolean equals(getValue_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case KEY:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getValue_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class getValue_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getValue_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField IO_EXCEPTION_FIELD_DESC = new TField("ioException", TType.STRUCT, (short)1);
    private static final TField KEY_VALUE_STORE_EXCEPTION_FIELD_DESC = new TField("keyValueStoreException", TType.STRUCT, (short)2);

    private GetResult success;
    public static final int SUCCESS = 0;
    private KeyValueStoreIOException ioException;
    public static final int IOEXCEPTION = 1;
    private KeyValueStoreException keyValueStoreException;
    public static final int KEYVALUESTOREEXCEPTION = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, GetResult.class)));
      put(IOEXCEPTION, new FieldMetaData("ioException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(KEYVALUESTOREEXCEPTION, new FieldMetaData("keyValueStoreException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(getValue_result.class, metaDataMap);
    }

    public getValue_result() {
    }

    public getValue_result(
      GetResult success,
      KeyValueStoreIOException ioException,
      KeyValueStoreException keyValueStoreException)
    {
      this();
      this.success = success;
      this.ioException = ioException;
      this.keyValueStoreException = keyValueStoreException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getValue_result(getValue_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetResult(other.success);
      }
      if (other.isSetIoException()) {
        this.ioException = new KeyValueStoreIOException(other.ioException);
      }
      if (other.isSetKeyValueStoreException()) {
        this.keyValueStoreException = new KeyValueStoreException(other.keyValueStoreException);
      }
    }

    @Override
    public getValue_result clone() {
      return new getValue_result(this);
    }

    public GetResult getSuccess() {
      return this.success;
    }

    public void setSuccess(GetResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public KeyValueStoreIOException getIoException() {
      return this.ioException;
    }

    public void setIoException(KeyValueStoreIOException ioException) {
      this.ioException = ioException;
    }

    public void unsetIoException() {
      this.ioException = null;
    }

    // Returns true if field ioException is set (has been asigned a value) and false otherwise
    public boolean isSetIoException() {
      return this.ioException != null;
    }

    public KeyValueStoreException getKeyValueStoreException() {
      return this.keyValueStoreException;
    }

    public void setKeyValueStoreException(KeyValueStoreException keyValueStoreException) {
      this.keyValueStoreException = keyValueStoreException;
    }

    public void unsetKeyValueStoreException() {
      this.keyValueStoreException = null;
    }

    // Returns true if field keyValueStoreException is set (has been asigned a value) and false otherwise
    public boolean isSetKeyValueStoreException() {
      return this.keyValueStoreException != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetResult)value);
        }
        break;

      case IOEXCEPTION:
        if (value == null) {
          unsetIoException();
        } else {
          setIoException((KeyValueStoreIOException)value);
        }
        break;

      case KEYVALUESTOREEXCEPTION:
        if (value == null) {
          unsetKeyValueStoreException();
        } else {
          setKeyValueStoreException((KeyValueStoreException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case IOEXCEPTION:
        return getIoException();

      case KEYVALUESTOREEXCEPTION:
        return getKeyValueStoreException();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case IOEXCEPTION:
        return isSetIoException();
      case KEYVALUESTOREEXCEPTION:
        return isSetKeyValueStoreException();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getValue_result)
        return this.equals((getValue_result)that);
      return false;
    }

    public boolean equals(getValue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ioException = true && this.isSetIoException();
      boolean that_present_ioException = true && that.isSetIoException();
      if (this_present_ioException || that_present_ioException) {
        if (!(this_present_ioException && that_present_ioException))
          return false;
        if (!this.ioException.equals(that.ioException))
          return false;
      }

      boolean this_present_keyValueStoreException = true && this.isSetKeyValueStoreException();
      boolean that_present_keyValueStoreException = true && that.isSetKeyValueStoreException();
      if (this_present_keyValueStoreException || that_present_keyValueStoreException) {
        if (!(this_present_keyValueStoreException && that_present_keyValueStoreException))
          return false;
        if (!this.keyValueStoreException.equals(that.keyValueStoreException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new GetResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case IOEXCEPTION:
            if (field.type == TType.STRUCT) {
              this.ioException = new KeyValueStoreIOException();
              this.ioException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case KEYVALUESTOREEXCEPTION:
            if (field.type == TType.STRUCT) {
              this.keyValueStoreException = new KeyValueStoreException();
              this.keyValueStoreException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetIoException()) {
        oprot.writeFieldBegin(IO_EXCEPTION_FIELD_DESC);
        this.ioException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetKeyValueStoreException()) {
        oprot.writeFieldBegin(KEY_VALUE_STORE_EXCEPTION_FIELD_DESC);
        this.keyValueStoreException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getValue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioException:");
      if (this.ioException == null) {
        sb.append("null");
      } else {
        sb.append(this.ioException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyValueStoreException:");
      if (this.keyValueStoreException == null) {
        sb.append("null");
      } else {
        sb.append(this.keyValueStoreException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class setValue_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("setValue_args");
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
    private static final TField DATA_FIELD_DESC = new TField("data", TType.STRING, (short)2);

    private String key;
    public static final int KEY = 1;
    private byte[] data;
    public static final int DATA = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(DATA, new FieldMetaData("data", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(setValue_args.class, metaDataMap);
    }

    public setValue_args() {
    }

    public setValue_args(
      String key,
      byte[] data)
    {
      this();
      this.key = key;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setValue_args(setValue_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetData()) {
        this.data = new byte[other.data.length];
        System.arraycopy(other.data, 0, data, 0, other.data.length);
      }
    }

    @Override
    public setValue_args clone() {
      return new setValue_args(this);
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    // Returns true if field key is set (has been asigned a value) and false otherwise
    public boolean isSetKey() {
      return this.key != null;
    }

    public byte[] getData() {
      return this.data;
    }

    public void setData(byte[] data) {
      this.data = data;
    }

    public void unsetData() {
      this.data = null;
    }

    // Returns true if field data is set (has been asigned a value) and false otherwise
    public boolean isSetData() {
      return this.data != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((byte[])value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case KEY:
        return getKey();

      case DATA:
        return getData();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case KEY:
        return isSetKey();
      case DATA:
        return isSetData();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setValue_args)
        return this.equals((setValue_args)that);
      return false;
    }

    public boolean equals(setValue_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!java.util.Arrays.equals(this.data, that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case KEY:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DATA:
            if (field.type == TType.STRING) {
              this.data = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeBinary(this.data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setValue_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
          int __data_size = Math.min(this.data.length, 128);
          for (int i = 0; i < __data_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.data[i]).length() > 1 ? Integer.toHexString(this.data[i]).substring(Integer.toHexString(this.data[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.data[i]).toUpperCase());
          }
          if (this.data.length > 128) sb.append(" ...");
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class setValue_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("setValue_result");
    private static final TField IO_EXCEPTION_FIELD_DESC = new TField("ioException", TType.STRUCT, (short)1);
    private static final TField KEY_VALUE_STORE_EXCEPTION_FIELD_DESC = new TField("keyValueStoreException", TType.STRUCT, (short)2);

    private KeyValueStoreIOException ioException;
    public static final int IOEXCEPTION = 1;
    private KeyValueStoreException keyValueStoreException;
    public static final int KEYVALUESTOREEXCEPTION = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(IOEXCEPTION, new FieldMetaData("ioException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(KEYVALUESTOREEXCEPTION, new FieldMetaData("keyValueStoreException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(setValue_result.class, metaDataMap);
    }

    public setValue_result() {
    }

    public setValue_result(
      KeyValueStoreIOException ioException,
      KeyValueStoreException keyValueStoreException)
    {
      this();
      this.ioException = ioException;
      this.keyValueStoreException = keyValueStoreException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setValue_result(setValue_result other) {
      if (other.isSetIoException()) {
        this.ioException = new KeyValueStoreIOException(other.ioException);
      }
      if (other.isSetKeyValueStoreException()) {
        this.keyValueStoreException = new KeyValueStoreException(other.keyValueStoreException);
      }
    }

    @Override
    public setValue_result clone() {
      return new setValue_result(this);
    }

    public KeyValueStoreIOException getIoException() {
      return this.ioException;
    }

    public void setIoException(KeyValueStoreIOException ioException) {
      this.ioException = ioException;
    }

    public void unsetIoException() {
      this.ioException = null;
    }

    // Returns true if field ioException is set (has been asigned a value) and false otherwise
    public boolean isSetIoException() {
      return this.ioException != null;
    }

    public KeyValueStoreException getKeyValueStoreException() {
      return this.keyValueStoreException;
    }

    public void setKeyValueStoreException(KeyValueStoreException keyValueStoreException) {
      this.keyValueStoreException = keyValueStoreException;
    }

    public void unsetKeyValueStoreException() {
      this.keyValueStoreException = null;
    }

    // Returns true if field keyValueStoreException is set (has been asigned a value) and false otherwise
    public boolean isSetKeyValueStoreException() {
      return this.keyValueStoreException != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case IOEXCEPTION:
        if (value == null) {
          unsetIoException();
        } else {
          setIoException((KeyValueStoreIOException)value);
        }
        break;

      case KEYVALUESTOREEXCEPTION:
        if (value == null) {
          unsetKeyValueStoreException();
        } else {
          setKeyValueStoreException((KeyValueStoreException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case IOEXCEPTION:
        return getIoException();

      case KEYVALUESTOREEXCEPTION:
        return getKeyValueStoreException();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case IOEXCEPTION:
        return isSetIoException();
      case KEYVALUESTOREEXCEPTION:
        return isSetKeyValueStoreException();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setValue_result)
        return this.equals((setValue_result)that);
      return false;
    }

    public boolean equals(setValue_result that) {
      if (that == null)
        return false;

      boolean this_present_ioException = true && this.isSetIoException();
      boolean that_present_ioException = true && that.isSetIoException();
      if (this_present_ioException || that_present_ioException) {
        if (!(this_present_ioException && that_present_ioException))
          return false;
        if (!this.ioException.equals(that.ioException))
          return false;
      }

      boolean this_present_keyValueStoreException = true && this.isSetKeyValueStoreException();
      boolean that_present_keyValueStoreException = true && that.isSetKeyValueStoreException();
      if (this_present_keyValueStoreException || that_present_keyValueStoreException) {
        if (!(this_present_keyValueStoreException && that_present_keyValueStoreException))
          return false;
        if (!this.keyValueStoreException.equals(that.keyValueStoreException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case IOEXCEPTION:
            if (field.type == TType.STRUCT) {
              this.ioException = new KeyValueStoreIOException();
              this.ioException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case KEYVALUESTOREEXCEPTION:
            if (field.type == TType.STRUCT) {
              this.keyValueStoreException = new KeyValueStoreException();
              this.keyValueStoreException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetIoException()) {
        oprot.writeFieldBegin(IO_EXCEPTION_FIELD_DESC);
        this.ioException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetKeyValueStoreException()) {
        oprot.writeFieldBegin(KEY_VALUE_STORE_EXCEPTION_FIELD_DESC);
        this.keyValueStoreException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setValue_result(");
      boolean first = true;

      sb.append("ioException:");
      if (this.ioException == null) {
        sb.append("null");
      } else {
        sb.append(this.ioException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyValueStoreException:");
      if (this.keyValueStoreException == null) {
        sb.append("null");
      } else {
        sb.append(this.keyValueStoreException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class deleteValue_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("deleteValue_args");
    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);

    private String key;
    public static final int KEY = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(deleteValue_args.class, metaDataMap);
    }

    public deleteValue_args() {
    }

    public deleteValue_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteValue_args(deleteValue_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    @Override
    public deleteValue_args clone() {
      return new deleteValue_args(this);
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    // Returns true if field key is set (has been asigned a value) and false otherwise
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case KEY:
        return getKey();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case KEY:
        return isSetKey();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteValue_args)
        return this.equals((deleteValue_args)that);
      return false;
    }

    public boolean equals(deleteValue_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case KEY:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteValue_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class deleteValue_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("deleteValue_result");
    private static final TField IO_EXCEPTION_FIELD_DESC = new TField("ioException", TType.STRUCT, (short)1);
    private static final TField KEY_VALUE_STORE_EXCEPTION_FIELD_DESC = new TField("keyValueStoreException", TType.STRUCT, (short)2);

    private KeyValueStoreIOException ioException;
    public static final int IOEXCEPTION = 1;
    private KeyValueStoreException keyValueStoreException;
    public static final int KEYVALUESTOREEXCEPTION = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(IOEXCEPTION, new FieldMetaData("ioException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(KEYVALUESTOREEXCEPTION, new FieldMetaData("keyValueStoreException", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(deleteValue_result.class, metaDataMap);
    }

    public deleteValue_result() {
    }

    public deleteValue_result(
      KeyValueStoreIOException ioException,
      KeyValueStoreException keyValueStoreException)
    {
      this();
      this.ioException = ioException;
      this.keyValueStoreException = keyValueStoreException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteValue_result(deleteValue_result other) {
      if (other.isSetIoException()) {
        this.ioException = new KeyValueStoreIOException(other.ioException);
      }
      if (other.isSetKeyValueStoreException()) {
        this.keyValueStoreException = new KeyValueStoreException(other.keyValueStoreException);
      }
    }

    @Override
    public deleteValue_result clone() {
      return new deleteValue_result(this);
    }

    public KeyValueStoreIOException getIoException() {
      return this.ioException;
    }

    public void setIoException(KeyValueStoreIOException ioException) {
      this.ioException = ioException;
    }

    public void unsetIoException() {
      this.ioException = null;
    }

    // Returns true if field ioException is set (has been asigned a value) and false otherwise
    public boolean isSetIoException() {
      return this.ioException != null;
    }

    public KeyValueStoreException getKeyValueStoreException() {
      return this.keyValueStoreException;
    }

    public void setKeyValueStoreException(KeyValueStoreException keyValueStoreException) {
      this.keyValueStoreException = keyValueStoreException;
    }

    public void unsetKeyValueStoreException() {
      this.keyValueStoreException = null;
    }

    // Returns true if field keyValueStoreException is set (has been asigned a value) and false otherwise
    public boolean isSetKeyValueStoreException() {
      return this.keyValueStoreException != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case IOEXCEPTION:
        if (value == null) {
          unsetIoException();
        } else {
          setIoException((KeyValueStoreIOException)value);
        }
        break;

      case KEYVALUESTOREEXCEPTION:
        if (value == null) {
          unsetKeyValueStoreException();
        } else {
          setKeyValueStoreException((KeyValueStoreException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case IOEXCEPTION:
        return getIoException();

      case KEYVALUESTOREEXCEPTION:
        return getKeyValueStoreException();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case IOEXCEPTION:
        return isSetIoException();
      case KEYVALUESTOREEXCEPTION:
        return isSetKeyValueStoreException();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteValue_result)
        return this.equals((deleteValue_result)that);
      return false;
    }

    public boolean equals(deleteValue_result that) {
      if (that == null)
        return false;

      boolean this_present_ioException = true && this.isSetIoException();
      boolean that_present_ioException = true && that.isSetIoException();
      if (this_present_ioException || that_present_ioException) {
        if (!(this_present_ioException && that_present_ioException))
          return false;
        if (!this.ioException.equals(that.ioException))
          return false;
      }

      boolean this_present_keyValueStoreException = true && this.isSetKeyValueStoreException();
      boolean that_present_keyValueStoreException = true && that.isSetKeyValueStoreException();
      if (this_present_keyValueStoreException || that_present_keyValueStoreException) {
        if (!(this_present_keyValueStoreException && that_present_keyValueStoreException))
          return false;
        if (!this.keyValueStoreException.equals(that.keyValueStoreException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case IOEXCEPTION:
            if (field.type == TType.STRUCT) {
              this.ioException = new KeyValueStoreIOException();
              this.ioException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case KEYVALUESTOREEXCEPTION:
            if (field.type == TType.STRUCT) {
              this.keyValueStoreException = new KeyValueStoreException();
              this.keyValueStoreException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetIoException()) {
        oprot.writeFieldBegin(IO_EXCEPTION_FIELD_DESC);
        this.ioException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetKeyValueStoreException()) {
        oprot.writeFieldBegin(KEY_VALUE_STORE_EXCEPTION_FIELD_DESC);
        this.keyValueStoreException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteValue_result(");
      boolean first = true;

      sb.append("ioException:");
      if (this.ioException == null) {
        sb.append("null");
      } else {
        sb.append(this.ioException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyValueStoreException:");
      if (this.keyValueStoreException == null) {
        sb.append("null");
      } else {
        sb.append(this.keyValueStoreException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
